{"version":3,"sources":["images/01.jpg","images/02.jpg","images/03.jpg","images/04.jpg","components/SlideShow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SlideShow","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","activeIndex","getActiveIndex","step","newActiveIndex","numberOfSlide","updateDimension","container","style","height","concat","offsetWidth","ratioWH","navImage","setImageNavWidth","querySelectorAll","forEach","image","width","handleRunAutomatic","mode","timeout","automaticInterval","setInterval","next","Number","parseInt","componentDidMount","rootELem","ReactDOM","findDOMNode","assertThisInitialized","querySelector","window","addEventListener","setActiveIndex","setState","objectSpread","back","getActiveClass","index","renderSlide","react_default","a","createElement","key","className","images","length","src","alt","caption","renderImageNav","onClick","ratioWHArray","ratio","split","removeEventListener","updateDimensions","clearInterval","map","Component","img1","img2","img3","img4","App","handleChange","htmlFor","type","name","id","onChange","components_SlideShow","Boolean","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.726dfeb6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/01.ec6c3793.jpg\";","module.exports = __webpack_public_path__ + \"static/media/02.ef6a0aba.jpg\";","module.exports = __webpack_public_path__ + \"static/media/03.3e9283a3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/04.81a2fa44.jpg\";","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./gallery.css\";\r\n\r\nclass SlideShow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const ratioWHArray = this.props.ratio.split(\":\");\r\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\r\n    this.numberOfSlide = this.props.images.length;\r\n  }\r\n  state = {\r\n    activeIndex: 0\r\n  };\r\n\r\n  getActiveIndex = step => {\r\n    const newActiveIndex = this.state.activeIndex + step;\r\n    if (newActiveIndex > this.numberOfSlide - 1) {\r\n      return 0;\r\n    } else if (newActiveIndex < 0) {\r\n      return this.numberOfSlide - 1;\r\n    }\r\n    return newActiveIndex;\r\n  };\r\n\r\n  updateDimension = () => {\r\n    this.container.style.height = `${this.container.offsetWidth /\r\n      this.ratioWH}px`;\r\n    this.navImage.style.height = `${this.navImage.offsetWidth /\r\n      this.numberOfSlide /\r\n      this.ratioWH}px`;\r\n  };\r\n\r\n  setImageNavWidth = () => {\r\n    const imagesNav = this.navImage.querySelectorAll(\".nav__image\");\r\n    imagesNav.forEach(image => {\r\n      image.style.width = `${100 / this.numberOfSlide}%`;\r\n    });\r\n  };\r\n\r\n  handleRunAutomatic = () => {\r\n    if (this.props.mode !== \"auto\") return;\r\n    const timeout = this.props.timeout || 1000;\r\n    this.automaticInterval = setInterval(this.next, Number.parseInt(timeout));\r\n  };\r\n\r\n  componentWillMount() {\r\n    window.removeEventListener(\"resize\", this.updateDimensions);\r\n    if (this.automaticInterval) clearInterval(this.automaticInterval);\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.rootELem = ReactDOM.findDOMNode(this);\r\n    this.container = this.rootELem.querySelector(\".container\");\r\n    this.navImage = this.rootELem.querySelector(\".image-nav\");\r\n    this.setImageNavWidth();\r\n    window.addEventListener(\"resize\", this.updateDimension);\r\n\r\n    this.handleRunAutomatic();\r\n  };\r\n\r\n  setActiveIndex = activeIndex => {\r\n    this.setState({ ...this.state, activeIndex });\r\n  };\r\n\r\n  next = () => {\r\n    const activeIndex = this.getActiveIndex(1);\r\n    this.setActiveIndex(activeIndex);\r\n  };\r\n\r\n  back = () => {\r\n    const activeIndex = this.getActiveIndex(-1);\r\n    this.setActiveIndex(activeIndex);\r\n  };\r\n\r\n  getActiveClass = index => {\r\n    return this.state.activeIndex === index ? \"active\" : \"\";\r\n  };\r\n\r\n  renderSlide = (image, index) => {\r\n    return (\r\n      <div key={index} className={`slide ${this.getActiveClass(index)}`}>\r\n        <div className=\"slide__number\">\r\n          {`${index + 1} / ${this.props.images.length}`}\r\n        </div>\r\n        <img className=\"slide__image\" src={image.src} alt={image.caption} />\r\n        <div className=\"slide__caption\">{image.caption}</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderImageNav = (image, index) => {\r\n    return (\r\n      <img\r\n        key={index}\r\n        className={`nav__image ${this.getActiveClass(index)}`}\r\n        src={image.src}\r\n        alt={image.caption}\r\n        onClick={() => this.setActiveIndex(index)}\r\n      />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"slideshow\">\r\n        <div className=\"container\">\r\n          {this.props.images.map(this.renderSlide)}\r\n          <span className=\"prev\" onClick={this.back}>\r\n            ❮\r\n          </span>\r\n          <span className=\"next\" onClick={this.next}>\r\n            ❯\r\n          </span>\r\n        </div>\r\n        <div className=\"image-nav\">\r\n          {this.props.images.map(this.renderImageNav)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SlideShow;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SlideShow from \"./components/SlideShow\";\nimport img1 from \"./images/01.jpg\";\nimport img2 from \"./images/02.jpg\";\nimport img3 from \"./images/03.jpg\";\nimport img4 from \"./images/04.jpg\";\n\nconst images = [\n  { src: img1, caption: \"Caption 1\" },\n  { src: img2, caption: \"Caption 2\" },\n  { src: img3, caption: \"Caption 3\" },\n  { src: img4, caption: \"Caption 4\" }\n];\n\nclass App extends Component {\n  state = {\n    mode: \"normal\"\n  };\n\n  handleChange = () => {\n    this.setState({\n      ...this.state,\n      mode: this.state.mode === \"auto\" ? \"normal\" : \"auto\"\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Gallery</h1>\n        <label htmlFor=\"automatic-slide\">Automatic</label>\n        <input\n          type=\"checkbox\"\n          name=\"\"\n          id=\"automatic-slide\"\n          onChange={this.handleChange}\n        />\n        <SlideShow\n          key={this.state.mode}\n          mode={this.state.mode}\n          images={images}\n          ratio={`3:2`}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}